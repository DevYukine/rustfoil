on:
    push:
        branches:
            - stable

name: Create Release

env:
    CARGO_TERM_COLOR: always

jobs:
    changelog:
        outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
        name: Create Changelog
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Source code
              uses: actions/checkout@v2
            - name: Create Conventional Changelog
              id: changelog
              uses: TriPSs/conventional-changelog-action@v3
              with:
                  github-token: ${{ secrets.github_token }}
                  version-file: './Cargo.toml'
                  version-path: "package.version"
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              if: ${{ steps.changelog.outputs.skipped == 'false' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.github_token }}
              with:
                  tag_name: ${{ steps.changelog.outputs.tag }}
                  release_name: ${{ steps.changelog.outputs.tag }}
                  body: ${{ steps.changelog.outputs.clean_changelog }}

    build_linux:
        name: Linux Build
        runs-on: ubuntu-latest
        needs: changelog
        strategy:
            matrix:
                target:
                    - name: i686-unknown-linux-gnu
                      arch: x86
                    - name: x86_64-unknown-linux-gnu
                      arch: x64
        steps:
            - name: Checkout Source code
              uses: actions/checkout@v2
            - name: Cache Rust dependencies
              uses: actions/cache@v2
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ matrix.target.name }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            - name: Install Rust Toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: ${{ matrix.target.name }}
                  override: true
            - name: Install Build-Tools
              run: sudo apt-get install build-essential gcc-multilib
            - name: Build
              uses: actions-rs/cargo@v1
              env:
                  TARGET_CC: clang
              with:
                  command: build
                  args: --release --target=${{ matrix.target.name }}
            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.changelog.outputs.upload_url }}
                  asset_path: target/${{ matrix.target.name }}/release
                  asset_name: rustfoil_${{ runner.OS }}_${{ matrix.target.arch }}
                  asset_content_type: application/x-elf

    build_windows:
        name: Windows Build
        runs-on: windows-latest
        needs: changelog
        strategy:
            matrix:
                target:
                    - name: i686-pc-windows-msvc
                      arch: x86
                    - name: x86_64-pc-windows-msvc
                      arch: x64
        steps:
            - name: Checkout Source code
              uses: actions/checkout@v2
            - name: Cache Rust dependencies
              uses: actions/cache@v2
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ matrix.target.name }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            - name: Install Rust Toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: ${{ matrix.target.name }}
                  override: true
            - name: Build
              uses: actions-rs/cargo@v1
              with:
                  command: build
                  args: --release --target=${{ matrix.target.name }}
            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.changelog.outputs.upload_url }}
                  asset_path: target/${{ matrix.target.name }}/release
                  asset_name: rustfoil_${{ runner.OS }}_${{ matrix.target.arch }}.exe
                  asset_content_type: application/x-msdownload
